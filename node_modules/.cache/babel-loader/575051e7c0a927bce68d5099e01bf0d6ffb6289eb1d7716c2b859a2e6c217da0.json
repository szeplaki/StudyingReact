{"ast":null,"code":"var _jsxFileName = \"/home/szeplaki/StudyingReact/src/components/NewExpense/NewExpense.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ExpenseForm } from \"./ExpenseForm\";\nimport './NewExpense.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function NewExpense(props) {\n  _s();\n  const [isPanelOpen, setIsPanelOpen] = useState(false);\n  const inputSaveHandler = expense => {\n    const newExpenseData = {\n      ...expense,\n      id: Math.random().toString()\n    };\n    props.onAddInput(expense);\n  };\n  const openPanel = () => {\n    setIsPanelOpen(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-expense\",\n    children: [!isPanelOpen && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: openPanel,\n      children: \"Add new expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this), isPanelOpen && /*#__PURE__*/_jsxDEV(ExpenseForm, {\n      onSaveForm: inputSaveHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this)\n  // This means, that we have a statement, either true or false, \n  // and we put the code with && operator after it to run.\n  // We write both cases down by using {} for each case.\n  ;\n}\n_s(NewExpense, \"BMLx08wyUDr2wiXF3WzfxFrx9Qk=\");\n_c = NewExpense;\nvar _c;\n$RefreshReg$(_c, \"NewExpense\");","map":{"version":3,"names":["React","useState","ExpenseForm","NewExpense","props","isPanelOpen","setIsPanelOpen","inputSaveHandler","expense","newExpenseData","id","Math","random","toString","onAddInput","openPanel"],"sources":["/home/szeplaki/StudyingReact/src/components/NewExpense/NewExpense.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport { ExpenseForm } from \"./ExpenseForm\";\nimport './NewExpense.css';\n\nexport function NewExpense(props) {\n\n    const [isPanelOpen, setIsPanelOpen] = useState(false);\n    const inputSaveHandler = expense => {\n        const newExpenseData = {\n            ...expense,\n            id: Math.random().toString()\n        }\n        props.onAddInput(expense);\n    }\n\n    const openPanel = () => {\n        setIsPanelOpen(true);\n    }\n\n    return (\n        <div className=\"new-expense\">\n            {!isPanelOpen && (\n                <button onClick={openPanel}>Add new expense</button>\n            )}\n            {isPanelOpen && (\n                <ExpenseForm onSaveForm={inputSaveHandler}/>\n            )}\n            \n        </div> \n        // This means, that we have a statement, either true or false, \n        // and we put the code with && operator after it to run.\n        // We write both cases down by using {} for each case.\n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAASC,WAAW,QAAQ,eAAe;AAC3C,OAAO,kBAAkB;AAAC;AAE1B,OAAO,SAASC,UAAU,CAACC,KAAK,EAAE;EAAA;EAE9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMM,gBAAgB,GAAGC,OAAO,IAAI;IAChC,MAAMC,cAAc,GAAG;MACnB,GAAGD,OAAO;MACVE,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ;IAC9B,CAAC;IACDT,KAAK,CAACU,UAAU,CAACN,OAAO,CAAC;EAC7B,CAAC;EAED,MAAMO,SAAS,GAAG,MAAM;IACpBT,cAAc,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,oBACI;IAAK,SAAS,EAAC,aAAa;IAAA,WACvB,CAACD,WAAW,iBACT;MAAQ,OAAO,EAAEU,SAAU;MAAA,UAAC;IAAe;MAAA;MAAA;MAAA;IAAA,QAC9C,EACAV,WAAW,iBACR,QAAC,WAAW;MAAC,UAAU,EAAEE;IAAiB;MAAA;MAAA;MAAA;IAAA,QAC7C;EAAA;IAAA;IAAA;IAAA;EAAA;EAGL;EACA;EACA;EAAA;AAER;AAAC,GA7BeJ,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}